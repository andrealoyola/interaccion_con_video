let handPose;
let video;
let hands = [];
let branchImagesYes = []; // Im√°genes para las ramas de "S√≠"
let branchImagesNo = []; // Im√°genes para las ramas de "No"
let trunkImage; // Imagen del tronco
let treeTopImage; // Imagen de la copa del √°rbol
let tree = [];
let messages = [
  "¬øTe sientes en paz contigo mismo en este momento?",
  "¬øTe permites expresar tus emociones libremente?",
  "¬øTe sientes valorado por las personas cercanas a ti?",
  "¬øSientes que recibes el apoyo emocional que necesitas?",
  "¬øHaces algo que disfrutes verdaderamente todos los d√≠as?",
  "¬øTe entusiasma pensar en tu futuro?",
  "¬øSientes que est√°s aprovechando al m√°ximo tus talentos?",
  "¬øTe sientes agradecido por lo que tienes en la vida?",
  "¬øTe has perdonado por errores pasados?",
];
let message =
  "Cada decisi√≥n que tomes har√° crecer un √°rbol √∫nico. ¬øEst√°s listo para comenzar?";
let decisionStep = 0;
let decisionMade = false;
let delayTime = 1000;
let lastActionTime = 0;

function preload() {
  handPose = ml5.handPose();
  trunkImage = loadImage("tronco.png"); // Carga la imagen del tronco
  treeTopImage = loadImage("top_branch.png"); // Carga la imagen de la copa del √°rbol

  // Carga las im√°genes de las ramas para "S√≠"
  for (let i = 1; i <= 7; i++) {
    branchImagesYes.push(loadImage(`branch_yes_${i}.png`));
  }

  // Carga las im√°genes de las ramas para "No"
  for (let i = 1; i <= 8; i++) {
    branchImagesNo.push(loadImage(`branch_no_${i}.png`));
  }
}

function gotHands(results) {
  hands = results;
  if (
    hands.length > 0 &&
    !decisionMade &&
    millis() - lastActionTime > delayTime
  ) {
    processDecision(hands[0]);
  }
}

function setup() {
  let canvas = createCanvas(1420, 1000);
  canvas.position((windowWidth - width) / 2, (windowHeight - height) / 2);
  video = createCapture(VIDEO);
  video.size(640, 480);
  video.hide();
  handPose.detectStart(video, gotHands);
}

function draw() {
  background(255);
  image(video, 50, 100, 500, 500);
  fill(237, 237, 254);
  rect(50, 650, 500, 300);
  rect(50, 20, 820, 50);

  fill(151, 158, 200); // Color del texto
  noStroke();
  textSize(22);
  textAlign(LEFT, CENTER);
  text(
    "Reglas de la actividad: \nUsa movimientos de tus manos para \nresponder las preguntas de forma interactiva.\n \nPara responder SI \nLevanta el pulgar üëç.\n \nPara responder NO \nCierra el pu√±o ‚úä.",
    80,
    800
  );

  // Muestra el texto en pantalla
  fill(0);
  noStroke();
  textSize(22);
  textAlign(LEFT);
  text(message, 60, 45);

  // Dibuja la imagen del tronco en la base del lienzo
  let trunkWidth = trunkImage.width / 2; // Tama√±o del tronco ajustado
  let trunkHeight = trunkImage.height;
  image(trunkImage, width - 1069 / 2 - trunkWidth / 2, height - trunkHeight);

  // Dibuja las ramas
  for (let i = 0; i < tree.length; i++) {
    let branch = tree[i];
    image(branch.image, branch.x, branch.y);
  }

  // Dibuja la copa del √°rbol si el √°rbol est√° completo
  if (decisionStep >= messages.length) {
    let topWidth = treeTopImage.width - 750 / 2;
    let topHeight = treeTopImage.height;

    // Calcula la posici√≥n para que el borde superior de la copa toque el borde superior del canvas
    let topX = width / 2 - topWidth / 2;
    let topY = 0; // Borde superior del canvas

    image(treeTopImage, topX, topY);

    // Mostrar el recuadro con el resultado
    let boxWidth = 500;
    let boxHeight = 300;
    let boxX = width / 2;
    let boxY = height / 2;

    fill(151, 158, 200); // Color de fondo del recuadro
    stroke(0);
    rect(boxX, boxY, boxWidth, boxHeight, 10); // Dibuja el recuadro con bordes redondeados

    fill(255); // Color del texto
    noStroke();
    textSize(32);
    textAlign(CENTER, CENTER);
    text(
      "Gracias por participar.\nTu √°rbol refleja tus elecciones.\n¬°Comparte tu experiencia!",
      boxX + boxWidth / 2,
      boxY + boxHeight / 2
    );
  }
}

function processDecision(hand) {
  let keypoints = hand.keypoints;
  let indexFinger = keypoints[8];
  let thumb = keypoints[4];

  if (isThumbUp(thumb, indexFinger)) {
    handleYes();
  } else if (isFist(keypoints)) {
    handleNo();
  }
}

function isThumbUp(thumb, indexFinger) {
  return thumb.y < indexFinger.y;
}

function isFist(keypoints) {
  return keypoints[5].y > keypoints[9].y && keypoints[17].y > keypoints[13].y;
}

function handleYes() {
  if (decisionStep < messages.length) {
    let yOffset = height - 200 - decisionStep * 80;
    tree.push({
      x: width / 2 + 222, // Fija la posici√≥n de X a la derecha
      y: yOffset,
      image: random(branchImagesYes),
    });
    nextQuestion();
  }
}

function handleNo() {
  if (decisionStep < messages.length) {
    let yOffset = height - 200 - decisionStep * 80;
    tree.push({
      x: width / 2 - 32, // Fija la posici√≥n de X a la izquierda
      y: yOffset, // La Y cambia con cada decisi√≥n
      image: random(branchImagesNo),
    });
    nextQuestion();
  }
}

function nextQuestion() {
  decisionStep++;
  lastActionTime = millis();
  if (decisionStep < messages.length) {
    message = messages[decisionStep];
    decisionMade = false;
  } else {
    message = "El √°rbol est√° completo. ¬°Gracias por participar!";
  }
}

function mousePressed() {
  decisionStep = 0;
  decisionMade = false;
  message =
    "Cada decisi√≥n que tomes har√° crecer un √°rbol √∫nico. ¬øEst√°s listo para comenzar?";
  tree = [];
}
